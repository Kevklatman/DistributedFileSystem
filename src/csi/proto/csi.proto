syntax = "proto3";

package csi.v1;

service Identity {
    rpc GetPluginInfo(GetPluginInfoRequest) returns (GetPluginInfoResponse) {}
    rpc GetPluginCapabilities(GetPluginCapabilitiesRequest) returns (GetPluginCapabilitiesResponse) {}
    rpc Probe(ProbeRequest) returns (ProbeResponse) {}
}

service Controller {
    rpc CreateVolume(CreateVolumeRequest) returns (CreateVolumeResponse) {}
    rpc DeleteVolume(DeleteVolumeRequest) returns (DeleteVolumeResponse) {}
    rpc ControllerPublishVolume(ControllerPublishVolumeRequest) returns (ControllerPublishVolumeResponse) {}
    rpc ControllerUnpublishVolume(ControllerUnpublishVolumeRequest) returns (ControllerUnpublishVolumeResponse) {}
    rpc ValidateVolumeCapabilities(ValidateVolumeCapabilitiesRequest) returns (ValidateVolumeCapabilitiesResponse) {}
}

service Node {
    rpc NodeStageVolume(NodeStageVolumeRequest) returns (NodeStageVolumeResponse) {}
    rpc NodeUnstageVolume(NodeUnstageVolumeRequest) returns (NodeUnstageVolumeResponse) {}
    rpc NodePublishVolume(NodePublishVolumeRequest) returns (NodePublishVolumeResponse) {}
    rpc NodeUnpublishVolume(NodeUnpublishVolumeRequest) returns (NodeUnpublishVolumeResponse) {}
    rpc NodeGetCapabilities(NodeGetCapabilitiesRequest) returns (NodeGetCapabilitiesResponse) {}
}

message GetPluginInfoRequest {}

message GetPluginInfoResponse {
    string name = 1;
    string vendor_version = 2;
}

message GetPluginCapabilitiesRequest {}

message GetPluginCapabilitiesResponse {
    repeated PluginCapability capabilities = 1;
}

message PluginCapability {
    message Service {
        enum Type {
            UNKNOWN = 0;
            CONTROLLER_SERVICE = 1;
        }
        Type type = 1;
    }
    oneof type {
        Service service = 1;
    }
}

message ProbeRequest {}

message ProbeResponse {
    bool ready = 1;
}

message CreateVolumeRequest {
    string name = 1;
    CapacityRange capacity_range = 2;
    repeated VolumeCapability volume_capabilities = 3;
    map<string, string> parameters = 4;
}

message CreateVolumeResponse {
    Volume volume = 1;
}

message DeleteVolumeRequest {
    string volume_id = 1;
}

message DeleteVolumeResponse {}

message ControllerPublishVolumeRequest {
    string volume_id = 1;
    string node_id = 2;
    VolumeCapability volume_capability = 3;
    bool readonly = 4;
}

message ControllerPublishVolumeResponse {
    map<string, string> publish_context = 1;
}

message ControllerUnpublishVolumeRequest {
    string volume_id = 1;
    string node_id = 2;
}

message ControllerUnpublishVolumeResponse {}

message ValidateVolumeCapabilitiesRequest {
    string volume_id = 1;
    repeated VolumeCapability volume_capabilities = 2;
    map<string, string> volume_context = 3;
}

message ValidateVolumeCapabilitiesResponse {
    message Confirmed {
        map<string, string> volume_context = 1;
        repeated VolumeCapability volume_capabilities = 2;
    }
    Confirmed confirmed = 1;
}

message NodeStageVolumeRequest {
    string volume_id = 1;
    string staging_target_path = 2;
    VolumeCapability volume_capability = 3;
    map<string, string> publish_context = 4;
}

message NodeStageVolumeResponse {}

message NodeUnstageVolumeRequest {
    string volume_id = 1;
    string staging_target_path = 2;
}

message NodeUnstageVolumeResponse {}

message NodePublishVolumeRequest {
    string volume_id = 1;
    string target_path = 2;
    VolumeCapability volume_capability = 3;
    bool readonly = 4;
    map<string, string> publish_context = 5;
}

message NodePublishVolumeResponse {}

message NodeUnpublishVolumeRequest {
    string volume_id = 1;
    string target_path = 2;
}

message NodeUnpublishVolumeResponse {}

message NodeGetCapabilitiesRequest {}

message NodeGetCapabilitiesResponse {
    repeated NodeServiceCapability capabilities = 1;
}

message NodeServiceCapability {
    message RPC {
        enum Type {
            UNKNOWN = 0;
            STAGE_UNSTAGE_VOLUME = 1;
        }
        Type type = 1;
    }
    oneof type {
        RPC rpc = 1;
    }
}

message Volume {
    string volume_id = 1;
    int64 capacity_bytes = 2;
    map<string, string> volume_context = 3;
}

message VolumeCapability {
    message BlockVolume {}

    message MountVolume {
        string fs_type = 1;
        repeated string mount_flags = 2;
    }

    message AccessMode {
        enum Mode {
            UNKNOWN = 0;
            SINGLE_NODE_WRITER = 1;
            SINGLE_NODE_READER_ONLY = 2;
            MULTI_NODE_READER_ONLY = 3;
            MULTI_NODE_SINGLE_WRITER = 4;
            MULTI_NODE_MULTI_WRITER = 5;
        }
        Mode mode = 1;
    }

    oneof access_type {
        BlockVolume block = 1;
        MountVolume mount = 2;
    }
    AccessMode access_mode = 3;
}

message CapacityRange {
    int64 required_bytes = 1;
    int64 limit_bytes = 2;
}
