apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: dfs.csi.k8s.io
spec:
  attachRequired: true
  podInfoOnMount: true
  volumeLifecycleModes:
    - Persistent
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dfs-csi-controller
  namespace: default
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dfs-csi-controller-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dfs-csi-controller-binding
subjects:
  - kind: ServiceAccount
    name: dfs-csi-controller
    namespace: default
roleRef:
  kind: ClusterRole
  name: dfs-csi-controller-role
  apiGroup: rbac.authorization.k8s.io
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: dfs-csi-controller
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dfs-csi-controller
  template:
    metadata:
      labels:
        app: dfs-csi-controller
    spec:
      serviceAccount: dfs-csi-controller
      containers:
        - name: csi-controller
          image: dfs-csi-driver:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: MODE
              value: "controller"
            - name: ENDPOINT
              value: "unix:///csi/csi.sock"
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
      volumes:
        - name: socket-dir
          emptyDir: {}
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: dfs-csi-node
  namespace: default
spec:
  selector:
    matchLabels:
      app: dfs-csi-node
  template:
    metadata:
      labels:
        app: dfs-csi-node
    spec:
      serviceAccount: dfs-csi-controller
      hostNetwork: true
      containers:
        - name: csi-node-driver
          image: dfs-csi-driver:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: MODE
              value: "node"
            - name: ENDPOINT
              value: "unix:///csi/csi.sock"
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          securityContext:
            privileged: true
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: "Bidirectional"
            - name: device-dir
              mountPath: /dev
      volumes:
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/dfs.csi.k8s.io
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
            type: Directory
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: dfs-hybrid-storage
provisioner: dfs.csi.k8s.io
parameters:
  type: hybrid
  tieringEnabled: "true"
reclaimPolicy: Delete
volumeBindingMode: Immediate
