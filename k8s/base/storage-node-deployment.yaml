apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dfs-storage-node
  labels:
    app: dfs-storage-node
spec:
  serviceName: dfs-storage-service
  replicas: 3
  selector:
    matchLabels:
      app: dfs-storage-node
  template:
    metadata:
      labels:
        app: dfs-storage-node
    spec:
      containers:
      - name: storage-node
        image: localhost:5000/dfs-storage-node:latest
        ports:
        - containerPort: 8080
          name: http
        volumeMounts:
        - name: data
          mountPath: /data
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: dfs-storage-service
spec:
  selector:
    app: dfs-storage-node
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  clusterIP: None
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: dfs-storage-pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: dfs-storage-node
