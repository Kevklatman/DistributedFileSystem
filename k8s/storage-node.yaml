apiVersion: v1
kind: ServiceAccount
metadata:
  name: storage-node-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: storage-node-role
rules:
- apiGroups: [""]
  resources: ["pods", "nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["create", "get", "list", "update", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: storage-node-role-binding
subjects:
- kind: ServiceAccount
  name: storage-node-sa
roleRef:
  kind: Role
  name: storage-node-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dfs-storage-node
spec:
  serviceName: dfs-storage
  replicas: 1
  selector:
    matchLabels:
      app: dfs-storage-node
  template:
    metadata:
      labels:
        app: dfs-storage-node
    spec:
      serviceAccountName: storage-node-sa
      containers:
      - name: storage-node
        image: dfs-storage-node:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8080
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: dfs-storage
spec:
  clusterIP: None
  selector:
    app: dfs-storage-node
  ports:
  - port: 8080
    targetPort: 8080
    name: http
