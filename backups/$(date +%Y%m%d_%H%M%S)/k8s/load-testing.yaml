apiVersion: apps/v1
kind: Deployment
metadata:
  name: locust
  namespace: distributed-fs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: locust
  template:
    metadata:
      labels:
        app: locust
    spec:
      containers:
      - name: locust
        image: locustio/locust
        ports:
        - containerPort: 8089
        - containerPort: 9100  # For Prometheus metrics
        env:
        - name: TARGET_HOST
          value: "http://dfs-core-service:8000"  # Using k8s service name
        - name: LOCUST_LOCUSTFILE
          value: "/app/locustfile.py"
        volumeMounts:
        - name: locust-scripts
          mountPath: /app
      volumes:
      - name: locust-scripts
        configMap:
          name: locust-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: locust
  namespace: distributed-fs
spec:
  type: NodePort
  ports:
  - port: 8089
    targetPort: 8089
    nodePort: 30089
    name: web-ui
  - port: 9100
    targetPort: 9100
    nodePort: 30100
    name: metrics
  selector:
    app: locust
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: locust-scripts
  namespace: distributed-fs
data:
  locustfile.py: |
    from locust import HttpUser, task, between

    class DFSUser(HttpUser):
        wait_time = between(1, 2)
        
        @task
        def upload_file(self):
            # Your existing load test scenarios here
            pass
