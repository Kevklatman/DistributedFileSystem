// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: storage.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_storage_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_storage_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_storage_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_storage_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_storage_2eproto;
namespace storage {
class DeleteFileRequest;
struct DeleteFileRequestDefaultTypeInternal;
extern DeleteFileRequestDefaultTypeInternal _DeleteFileRequest_default_instance_;
class DeleteFileResponse;
struct DeleteFileResponseDefaultTypeInternal;
extern DeleteFileResponseDefaultTypeInternal _DeleteFileResponse_default_instance_;
class HealthCheckRequest;
struct HealthCheckRequestDefaultTypeInternal;
extern HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
class HealthCheckResponse;
struct HealthCheckResponseDefaultTypeInternal;
extern HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
class ListFilesRequest;
struct ListFilesRequestDefaultTypeInternal;
extern ListFilesRequestDefaultTypeInternal _ListFilesRequest_default_instance_;
class ListFilesResponse;
struct ListFilesResponseDefaultTypeInternal;
extern ListFilesResponseDefaultTypeInternal _ListFilesResponse_default_instance_;
class RetrieveChunkRequest;
struct RetrieveChunkRequestDefaultTypeInternal;
extern RetrieveChunkRequestDefaultTypeInternal _RetrieveChunkRequest_default_instance_;
class RetrieveChunkResponse;
struct RetrieveChunkResponseDefaultTypeInternal;
extern RetrieveChunkResponseDefaultTypeInternal _RetrieveChunkResponse_default_instance_;
class StoreChunkRequest;
struct StoreChunkRequestDefaultTypeInternal;
extern StoreChunkRequestDefaultTypeInternal _StoreChunkRequest_default_instance_;
class StoreChunkResponse;
struct StoreChunkResponseDefaultTypeInternal;
extern StoreChunkResponseDefaultTypeInternal _StoreChunkResponse_default_instance_;
}  // namespace storage
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace storage {

// ===================================================================


// -------------------------------------------------------------------

class StoreChunkResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:storage.StoreChunkResponse) */ {
 public:
  inline StoreChunkResponse() : StoreChunkResponse(nullptr) {}
  ~StoreChunkResponse() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StoreChunkResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline StoreChunkResponse(const StoreChunkResponse& from) : StoreChunkResponse(nullptr, from) {}
  inline StoreChunkResponse(StoreChunkResponse&& from) noexcept
      : StoreChunkResponse(nullptr, std::move(from)) {}
  inline StoreChunkResponse& operator=(const StoreChunkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreChunkResponse& operator=(StoreChunkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoreChunkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreChunkResponse* internal_default_instance() {
    return reinterpret_cast<const StoreChunkResponse*>(
        &_StoreChunkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(StoreChunkResponse& a, StoreChunkResponse& b) { a.Swap(&b); }
  inline void Swap(StoreChunkResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreChunkResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoreChunkResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StoreChunkResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StoreChunkResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StoreChunkResponse& from) { StoreChunkResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StoreChunkResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "storage.StoreChunkResponse"; }

 protected:
  explicit StoreChunkResponse(::google::protobuf::Arena* arena);
  StoreChunkResponse(::google::protobuf::Arena* arena, const StoreChunkResponse& from);
  StoreChunkResponse(::google::protobuf::Arena* arena, StoreChunkResponse&& from) noexcept
      : StoreChunkResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:storage.StoreChunkResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StoreChunkResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StoreChunkResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class StoreChunkRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:storage.StoreChunkRequest) */ {
 public:
  inline StoreChunkRequest() : StoreChunkRequest(nullptr) {}
  ~StoreChunkRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StoreChunkRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StoreChunkRequest(const StoreChunkRequest& from) : StoreChunkRequest(nullptr, from) {}
  inline StoreChunkRequest(StoreChunkRequest&& from) noexcept
      : StoreChunkRequest(nullptr, std::move(from)) {}
  inline StoreChunkRequest& operator=(const StoreChunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreChunkRequest& operator=(StoreChunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoreChunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreChunkRequest* internal_default_instance() {
    return reinterpret_cast<const StoreChunkRequest*>(
        &_StoreChunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(StoreChunkRequest& a, StoreChunkRequest& b) { a.Swap(&b); }
  inline void Swap(StoreChunkRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreChunkRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoreChunkRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StoreChunkRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StoreChunkRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StoreChunkRequest& from) { StoreChunkRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StoreChunkRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "storage.StoreChunkRequest"; }

 protected:
  explicit StoreChunkRequest(::google::protobuf::Arena* arena);
  StoreChunkRequest(::google::protobuf::Arena* arena, const StoreChunkRequest& from);
  StoreChunkRequest(::google::protobuf::Arena* arena, StoreChunkRequest&& from) noexcept
      : StoreChunkRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
    kDataFieldNumber = 3,
    kChecksumFieldNumber = 4,
    kChunkNumberFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // bytes data = 3;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string checksum = 4;
  void clear_checksum() ;
  const std::string& checksum() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_checksum(Arg_&& arg, Args_... args);
  std::string* mutable_checksum();
  PROTOBUF_NODISCARD std::string* release_checksum();
  void set_allocated_checksum(std::string* value);

  private:
  const std::string& _internal_checksum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_checksum(
      const std::string& value);
  std::string* _internal_mutable_checksum();

  public:
  // int32 chunk_number = 2;
  void clear_chunk_number() ;
  ::int32_t chunk_number() const;
  void set_chunk_number(::int32_t value);

  private:
  ::int32_t _internal_chunk_number() const;
  void _internal_set_chunk_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:storage.StoreChunkRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      50, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StoreChunkRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StoreChunkRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr checksum_;
    ::int32_t chunk_number_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class RetrieveChunkResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:storage.RetrieveChunkResponse) */ {
 public:
  inline RetrieveChunkResponse() : RetrieveChunkResponse(nullptr) {}
  ~RetrieveChunkResponse() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RetrieveChunkResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RetrieveChunkResponse(const RetrieveChunkResponse& from) : RetrieveChunkResponse(nullptr, from) {}
  inline RetrieveChunkResponse(RetrieveChunkResponse&& from) noexcept
      : RetrieveChunkResponse(nullptr, std::move(from)) {}
  inline RetrieveChunkResponse& operator=(const RetrieveChunkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveChunkResponse& operator=(RetrieveChunkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetrieveChunkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetrieveChunkResponse* internal_default_instance() {
    return reinterpret_cast<const RetrieveChunkResponse*>(
        &_RetrieveChunkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(RetrieveChunkResponse& a, RetrieveChunkResponse& b) { a.Swap(&b); }
  inline void Swap(RetrieveChunkResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetrieveChunkResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetrieveChunkResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RetrieveChunkResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RetrieveChunkResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RetrieveChunkResponse& from) { RetrieveChunkResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RetrieveChunkResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "storage.RetrieveChunkResponse"; }

 protected:
  explicit RetrieveChunkResponse(::google::protobuf::Arena* arena);
  RetrieveChunkResponse(::google::protobuf::Arena* arena, const RetrieveChunkResponse& from);
  RetrieveChunkResponse(::google::protobuf::Arena* arena, RetrieveChunkResponse&& from) noexcept
      : RetrieveChunkResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kChecksumFieldNumber = 2,
    kMessageFieldNumber = 4,
    kSuccessFieldNumber = 3,
  };
  // bytes data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string checksum = 2;
  void clear_checksum() ;
  const std::string& checksum() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_checksum(Arg_&& arg, Args_... args);
  std::string* mutable_checksum();
  PROTOBUF_NODISCARD std::string* release_checksum();
  void set_allocated_checksum(std::string* value);

  private:
  const std::string& _internal_checksum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_checksum(
      const std::string& value);
  std::string* _internal_mutable_checksum();

  public:
  // string message = 4;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 3;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:storage.RetrieveChunkResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      53, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RetrieveChunkResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RetrieveChunkResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr checksum_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class RetrieveChunkRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:storage.RetrieveChunkRequest) */ {
 public:
  inline RetrieveChunkRequest() : RetrieveChunkRequest(nullptr) {}
  ~RetrieveChunkRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RetrieveChunkRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RetrieveChunkRequest(const RetrieveChunkRequest& from) : RetrieveChunkRequest(nullptr, from) {}
  inline RetrieveChunkRequest(RetrieveChunkRequest&& from) noexcept
      : RetrieveChunkRequest(nullptr, std::move(from)) {}
  inline RetrieveChunkRequest& operator=(const RetrieveChunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveChunkRequest& operator=(RetrieveChunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetrieveChunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetrieveChunkRequest* internal_default_instance() {
    return reinterpret_cast<const RetrieveChunkRequest*>(
        &_RetrieveChunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(RetrieveChunkRequest& a, RetrieveChunkRequest& b) { a.Swap(&b); }
  inline void Swap(RetrieveChunkRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetrieveChunkRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetrieveChunkRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RetrieveChunkRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RetrieveChunkRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RetrieveChunkRequest& from) { RetrieveChunkRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RetrieveChunkRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "storage.RetrieveChunkRequest"; }

 protected:
  explicit RetrieveChunkRequest(::google::protobuf::Arena* arena);
  RetrieveChunkRequest(::google::protobuf::Arena* arena, const RetrieveChunkRequest& from);
  RetrieveChunkRequest(::google::protobuf::Arena* arena, RetrieveChunkRequest&& from) noexcept
      : RetrieveChunkRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
    kChunkNumberFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // int32 chunk_number = 2;
  void clear_chunk_number() ;
  ::int32_t chunk_number() const;
  void set_chunk_number(::int32_t value);

  private:
  ::int32_t _internal_chunk_number() const;
  void _internal_set_chunk_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:storage.RetrieveChunkRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RetrieveChunkRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RetrieveChunkRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::int32_t chunk_number_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class ListFilesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:storage.ListFilesResponse) */ {
 public:
  inline ListFilesResponse() : ListFilesResponse(nullptr) {}
  ~ListFilesResponse() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListFilesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListFilesResponse(const ListFilesResponse& from) : ListFilesResponse(nullptr, from) {}
  inline ListFilesResponse(ListFilesResponse&& from) noexcept
      : ListFilesResponse(nullptr, std::move(from)) {}
  inline ListFilesResponse& operator=(const ListFilesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFilesResponse& operator=(ListFilesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListFilesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFilesResponse* internal_default_instance() {
    return reinterpret_cast<const ListFilesResponse*>(
        &_ListFilesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ListFilesResponse& a, ListFilesResponse& b) { a.Swap(&b); }
  inline void Swap(ListFilesResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFilesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListFilesResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ListFilesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListFilesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ListFilesResponse& from) { ListFilesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListFilesResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "storage.ListFilesResponse"; }

 protected:
  explicit ListFilesResponse(::google::protobuf::Arena* arena);
  ListFilesResponse(::google::protobuf::Arena* arena, const ListFilesResponse& from);
  ListFilesResponse(::google::protobuf::Arena* arena, ListFilesResponse&& from) noexcept
      : ListFilesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenamesFieldNumber = 1,
  };
  // repeated string filenames = 1;
  int filenames_size() const;
  private:
  int _internal_filenames_size() const;

  public:
  void clear_filenames() ;
  const std::string& filenames(int index) const;
  std::string* mutable_filenames(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filenames(int index, Arg_&& value, Args_... args);
  std::string* add_filenames();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_filenames(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& filenames() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_filenames();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_filenames() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_filenames();

  public:
  // @@protoc_insertion_point(class_scope:storage.ListFilesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ListFilesResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListFilesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> filenames_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class ListFilesRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:storage.ListFilesRequest) */ {
 public:
  inline ListFilesRequest() : ListFilesRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListFilesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListFilesRequest(const ListFilesRequest& from) : ListFilesRequest(nullptr, from) {}
  inline ListFilesRequest(ListFilesRequest&& from) noexcept
      : ListFilesRequest(nullptr, std::move(from)) {}
  inline ListFilesRequest& operator=(const ListFilesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFilesRequest& operator=(ListFilesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListFilesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFilesRequest* internal_default_instance() {
    return reinterpret_cast<const ListFilesRequest*>(
        &_ListFilesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ListFilesRequest& a, ListFilesRequest& b) { a.Swap(&b); }
  inline void Swap(ListFilesRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFilesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListFilesRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ListFilesRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListFilesRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListFilesRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "storage.ListFilesRequest"; }

 protected:
  explicit ListFilesRequest(::google::protobuf::Arena* arena);
  ListFilesRequest(::google::protobuf::Arena* arena, const ListFilesRequest& from);
  ListFilesRequest(::google::protobuf::Arena* arena, ListFilesRequest&& from) noexcept
      : ListFilesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:storage.ListFilesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ListFilesRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListFilesRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class HealthCheckResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:storage.HealthCheckResponse) */ {
 public:
  inline HealthCheckResponse() : HealthCheckResponse(nullptr) {}
  ~HealthCheckResponse() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HealthCheckResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline HealthCheckResponse(const HealthCheckResponse& from) : HealthCheckResponse(nullptr, from) {}
  inline HealthCheckResponse(HealthCheckResponse&& from) noexcept
      : HealthCheckResponse(nullptr, std::move(from)) {}
  inline HealthCheckResponse& operator=(const HealthCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckResponse& operator=(HealthCheckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckResponse* internal_default_instance() {
    return reinterpret_cast<const HealthCheckResponse*>(
        &_HealthCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(HealthCheckResponse& a, HealthCheckResponse& b) { a.Swap(&b); }
  inline void Swap(HealthCheckResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthCheckResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<HealthCheckResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HealthCheckResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HealthCheckResponse& from) { HealthCheckResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HealthCheckResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "storage.HealthCheckResponse"; }

 protected:
  explicit HealthCheckResponse(::google::protobuf::Arena* arena);
  HealthCheckResponse(::google::protobuf::Arena* arena, const HealthCheckResponse& from);
  HealthCheckResponse(::google::protobuf::Arena* arena, HealthCheckResponse&& from) noexcept
      : HealthCheckResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusFieldNumber = 3,
    kLatencyMsFieldNumber = 2,
    kHealthyFieldNumber = 1,
  };
  // string status = 3;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // double latency_ms = 2;
  void clear_latency_ms() ;
  double latency_ms() const;
  void set_latency_ms(double value);

  private:
  double _internal_latency_ms() const;
  void _internal_set_latency_ms(double value);

  public:
  // bool healthy = 1;
  void clear_healthy() ;
  bool healthy() const;
  void set_healthy(bool value);

  private:
  bool _internal_healthy() const;
  void _internal_set_healthy(bool value);

  public:
  // @@protoc_insertion_point(class_scope:storage.HealthCheckResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_HealthCheckResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HealthCheckResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr status_;
    double latency_ms_;
    bool healthy_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class HealthCheckRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:storage.HealthCheckRequest) */ {
 public:
  inline HealthCheckRequest() : HealthCheckRequest(nullptr) {}
  ~HealthCheckRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HealthCheckRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline HealthCheckRequest(const HealthCheckRequest& from) : HealthCheckRequest(nullptr, from) {}
  inline HealthCheckRequest(HealthCheckRequest&& from) noexcept
      : HealthCheckRequest(nullptr, std::move(from)) {}
  inline HealthCheckRequest& operator=(const HealthCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckRequest& operator=(HealthCheckRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthCheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckRequest* internal_default_instance() {
    return reinterpret_cast<const HealthCheckRequest*>(
        &_HealthCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(HealthCheckRequest& a, HealthCheckRequest& b) { a.Swap(&b); }
  inline void Swap(HealthCheckRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthCheckRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<HealthCheckRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HealthCheckRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HealthCheckRequest& from) { HealthCheckRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HealthCheckRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "storage.HealthCheckRequest"; }

 protected:
  explicit HealthCheckRequest(::google::protobuf::Arena* arena);
  HealthCheckRequest(::google::protobuf::Arena* arena, const HealthCheckRequest& from);
  HealthCheckRequest(::google::protobuf::Arena* arena, HealthCheckRequest&& from) noexcept
      : HealthCheckRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeIdFieldNumber = 1,
  };
  // string node_id = 1;
  void clear_node_id() ;
  const std::string& node_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node_id(Arg_&& arg, Args_... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* value);

  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(
      const std::string& value);
  std::string* _internal_mutable_node_id();

  public:
  // @@protoc_insertion_point(class_scope:storage.HealthCheckRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_HealthCheckRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HealthCheckRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr node_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class DeleteFileResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:storage.DeleteFileResponse) */ {
 public:
  inline DeleteFileResponse() : DeleteFileResponse(nullptr) {}
  ~DeleteFileResponse() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteFileResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeleteFileResponse(const DeleteFileResponse& from) : DeleteFileResponse(nullptr, from) {}
  inline DeleteFileResponse(DeleteFileResponse&& from) noexcept
      : DeleteFileResponse(nullptr, std::move(from)) {}
  inline DeleteFileResponse& operator=(const DeleteFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFileResponse& operator=(DeleteFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteFileResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteFileResponse*>(
        &_DeleteFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(DeleteFileResponse& a, DeleteFileResponse& b) { a.Swap(&b); }
  inline void Swap(DeleteFileResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteFileResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteFileResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DeleteFileResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteFileResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeleteFileResponse& from) { DeleteFileResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteFileResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "storage.DeleteFileResponse"; }

 protected:
  explicit DeleteFileResponse(::google::protobuf::Arena* arena);
  DeleteFileResponse(::google::protobuf::Arena* arena, const DeleteFileResponse& from);
  DeleteFileResponse(::google::protobuf::Arena* arena, DeleteFileResponse&& from) noexcept
      : DeleteFileResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:storage.DeleteFileResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeleteFileResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeleteFileResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class DeleteFileRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:storage.DeleteFileRequest) */ {
 public:
  inline DeleteFileRequest() : DeleteFileRequest(nullptr) {}
  ~DeleteFileRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteFileRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeleteFileRequest(const DeleteFileRequest& from) : DeleteFileRequest(nullptr, from) {}
  inline DeleteFileRequest(DeleteFileRequest&& from) noexcept
      : DeleteFileRequest(nullptr, std::move(from)) {}
  inline DeleteFileRequest& operator=(const DeleteFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFileRequest& operator=(DeleteFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteFileRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteFileRequest*>(
        &_DeleteFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(DeleteFileRequest& a, DeleteFileRequest& b) { a.Swap(&b); }
  inline void Swap(DeleteFileRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteFileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteFileRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DeleteFileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteFileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeleteFileRequest& from) { DeleteFileRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteFileRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "storage.DeleteFileRequest"; }

 protected:
  explicit DeleteFileRequest(::google::protobuf::Arena* arena);
  DeleteFileRequest(::google::protobuf::Arena* arena, const DeleteFileRequest& from);
  DeleteFileRequest(::google::protobuf::Arena* arena, DeleteFileRequest&& from) noexcept
      : DeleteFileRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // @@protoc_insertion_point(class_scope:storage.DeleteFileRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeleteFileRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeleteFileRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StoreChunkRequest

// string filename = 1;
inline void StoreChunkRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& StoreChunkRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:storage.StoreChunkRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StoreChunkRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:storage.StoreChunkRequest.filename)
}
inline std::string* StoreChunkRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:storage.StoreChunkRequest.filename)
  return _s;
}
inline const std::string& StoreChunkRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void StoreChunkRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* StoreChunkRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* StoreChunkRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:storage.StoreChunkRequest.filename)
  return _impl_.filename_.Release();
}
inline void StoreChunkRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.StoreChunkRequest.filename)
}

// int32 chunk_number = 2;
inline void StoreChunkRequest::clear_chunk_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_number_ = 0;
}
inline ::int32_t StoreChunkRequest::chunk_number() const {
  // @@protoc_insertion_point(field_get:storage.StoreChunkRequest.chunk_number)
  return _internal_chunk_number();
}
inline void StoreChunkRequest::set_chunk_number(::int32_t value) {
  _internal_set_chunk_number(value);
  // @@protoc_insertion_point(field_set:storage.StoreChunkRequest.chunk_number)
}
inline ::int32_t StoreChunkRequest::_internal_chunk_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunk_number_;
}
inline void StoreChunkRequest::_internal_set_chunk_number(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_number_ = value;
}

// bytes data = 3;
inline void StoreChunkRequest::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& StoreChunkRequest::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:storage.StoreChunkRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StoreChunkRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:storage.StoreChunkRequest.data)
}
inline std::string* StoreChunkRequest::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:storage.StoreChunkRequest.data)
  return _s;
}
inline const std::string& StoreChunkRequest::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void StoreChunkRequest::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* StoreChunkRequest::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* StoreChunkRequest::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:storage.StoreChunkRequest.data)
  return _impl_.data_.Release();
}
inline void StoreChunkRequest::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.StoreChunkRequest.data)
}

// string checksum = 4;
inline void StoreChunkRequest::clear_checksum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.checksum_.ClearToEmpty();
}
inline const std::string& StoreChunkRequest::checksum() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:storage.StoreChunkRequest.checksum)
  return _internal_checksum();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StoreChunkRequest::set_checksum(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.checksum_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:storage.StoreChunkRequest.checksum)
}
inline std::string* StoreChunkRequest::mutable_checksum() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_checksum();
  // @@protoc_insertion_point(field_mutable:storage.StoreChunkRequest.checksum)
  return _s;
}
inline const std::string& StoreChunkRequest::_internal_checksum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.checksum_.Get();
}
inline void StoreChunkRequest::_internal_set_checksum(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.checksum_.Set(value, GetArena());
}
inline std::string* StoreChunkRequest::_internal_mutable_checksum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.checksum_.Mutable( GetArena());
}
inline std::string* StoreChunkRequest::release_checksum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:storage.StoreChunkRequest.checksum)
  return _impl_.checksum_.Release();
}
inline void StoreChunkRequest::set_allocated_checksum(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.checksum_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.checksum_.IsDefault()) {
          _impl_.checksum_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.StoreChunkRequest.checksum)
}

// -------------------------------------------------------------------

// StoreChunkResponse

// bool success = 1;
inline void StoreChunkResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool StoreChunkResponse::success() const {
  // @@protoc_insertion_point(field_get:storage.StoreChunkResponse.success)
  return _internal_success();
}
inline void StoreChunkResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:storage.StoreChunkResponse.success)
}
inline bool StoreChunkResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void StoreChunkResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void StoreChunkResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& StoreChunkResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:storage.StoreChunkResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StoreChunkResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:storage.StoreChunkResponse.message)
}
inline std::string* StoreChunkResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:storage.StoreChunkResponse.message)
  return _s;
}
inline const std::string& StoreChunkResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void StoreChunkResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* StoreChunkResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* StoreChunkResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:storage.StoreChunkResponse.message)
  return _impl_.message_.Release();
}
inline void StoreChunkResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.StoreChunkResponse.message)
}

// -------------------------------------------------------------------

// RetrieveChunkRequest

// string filename = 1;
inline void RetrieveChunkRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& RetrieveChunkRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:storage.RetrieveChunkRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RetrieveChunkRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:storage.RetrieveChunkRequest.filename)
}
inline std::string* RetrieveChunkRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:storage.RetrieveChunkRequest.filename)
  return _s;
}
inline const std::string& RetrieveChunkRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void RetrieveChunkRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* RetrieveChunkRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* RetrieveChunkRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:storage.RetrieveChunkRequest.filename)
  return _impl_.filename_.Release();
}
inline void RetrieveChunkRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.RetrieveChunkRequest.filename)
}

// int32 chunk_number = 2;
inline void RetrieveChunkRequest::clear_chunk_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_number_ = 0;
}
inline ::int32_t RetrieveChunkRequest::chunk_number() const {
  // @@protoc_insertion_point(field_get:storage.RetrieveChunkRequest.chunk_number)
  return _internal_chunk_number();
}
inline void RetrieveChunkRequest::set_chunk_number(::int32_t value) {
  _internal_set_chunk_number(value);
  // @@protoc_insertion_point(field_set:storage.RetrieveChunkRequest.chunk_number)
}
inline ::int32_t RetrieveChunkRequest::_internal_chunk_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunk_number_;
}
inline void RetrieveChunkRequest::_internal_set_chunk_number(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_number_ = value;
}

// -------------------------------------------------------------------

// RetrieveChunkResponse

// bytes data = 1;
inline void RetrieveChunkResponse::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& RetrieveChunkResponse::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:storage.RetrieveChunkResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RetrieveChunkResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:storage.RetrieveChunkResponse.data)
}
inline std::string* RetrieveChunkResponse::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:storage.RetrieveChunkResponse.data)
  return _s;
}
inline const std::string& RetrieveChunkResponse::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void RetrieveChunkResponse::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* RetrieveChunkResponse::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* RetrieveChunkResponse::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:storage.RetrieveChunkResponse.data)
  return _impl_.data_.Release();
}
inline void RetrieveChunkResponse::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.RetrieveChunkResponse.data)
}

// string checksum = 2;
inline void RetrieveChunkResponse::clear_checksum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.checksum_.ClearToEmpty();
}
inline const std::string& RetrieveChunkResponse::checksum() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:storage.RetrieveChunkResponse.checksum)
  return _internal_checksum();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RetrieveChunkResponse::set_checksum(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.checksum_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:storage.RetrieveChunkResponse.checksum)
}
inline std::string* RetrieveChunkResponse::mutable_checksum() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_checksum();
  // @@protoc_insertion_point(field_mutable:storage.RetrieveChunkResponse.checksum)
  return _s;
}
inline const std::string& RetrieveChunkResponse::_internal_checksum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.checksum_.Get();
}
inline void RetrieveChunkResponse::_internal_set_checksum(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.checksum_.Set(value, GetArena());
}
inline std::string* RetrieveChunkResponse::_internal_mutable_checksum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.checksum_.Mutable( GetArena());
}
inline std::string* RetrieveChunkResponse::release_checksum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:storage.RetrieveChunkResponse.checksum)
  return _impl_.checksum_.Release();
}
inline void RetrieveChunkResponse::set_allocated_checksum(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.checksum_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.checksum_.IsDefault()) {
          _impl_.checksum_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.RetrieveChunkResponse.checksum)
}

// bool success = 3;
inline void RetrieveChunkResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool RetrieveChunkResponse::success() const {
  // @@protoc_insertion_point(field_get:storage.RetrieveChunkResponse.success)
  return _internal_success();
}
inline void RetrieveChunkResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:storage.RetrieveChunkResponse.success)
}
inline bool RetrieveChunkResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void RetrieveChunkResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 4;
inline void RetrieveChunkResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RetrieveChunkResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:storage.RetrieveChunkResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RetrieveChunkResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:storage.RetrieveChunkResponse.message)
}
inline std::string* RetrieveChunkResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:storage.RetrieveChunkResponse.message)
  return _s;
}
inline const std::string& RetrieveChunkResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void RetrieveChunkResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* RetrieveChunkResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* RetrieveChunkResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:storage.RetrieveChunkResponse.message)
  return _impl_.message_.Release();
}
inline void RetrieveChunkResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.RetrieveChunkResponse.message)
}

// -------------------------------------------------------------------

// DeleteFileRequest

// string filename = 1;
inline void DeleteFileRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& DeleteFileRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:storage.DeleteFileRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteFileRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:storage.DeleteFileRequest.filename)
}
inline std::string* DeleteFileRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:storage.DeleteFileRequest.filename)
  return _s;
}
inline const std::string& DeleteFileRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void DeleteFileRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* DeleteFileRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* DeleteFileRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:storage.DeleteFileRequest.filename)
  return _impl_.filename_.Release();
}
inline void DeleteFileRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.DeleteFileRequest.filename)
}

// -------------------------------------------------------------------

// DeleteFileResponse

// bool success = 1;
inline void DeleteFileResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool DeleteFileResponse::success() const {
  // @@protoc_insertion_point(field_get:storage.DeleteFileResponse.success)
  return _internal_success();
}
inline void DeleteFileResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:storage.DeleteFileResponse.success)
}
inline bool DeleteFileResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void DeleteFileResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void DeleteFileResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& DeleteFileResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:storage.DeleteFileResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteFileResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:storage.DeleteFileResponse.message)
}
inline std::string* DeleteFileResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:storage.DeleteFileResponse.message)
  return _s;
}
inline const std::string& DeleteFileResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void DeleteFileResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* DeleteFileResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* DeleteFileResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:storage.DeleteFileResponse.message)
  return _impl_.message_.Release();
}
inline void DeleteFileResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.DeleteFileResponse.message)
}

// -------------------------------------------------------------------

// ListFilesRequest

// -------------------------------------------------------------------

// ListFilesResponse

// repeated string filenames = 1;
inline int ListFilesResponse::_internal_filenames_size() const {
  return _internal_filenames().size();
}
inline int ListFilesResponse::filenames_size() const {
  return _internal_filenames_size();
}
inline void ListFilesResponse::clear_filenames() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filenames_.Clear();
}
inline std::string* ListFilesResponse::add_filenames() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_filenames()->Add();
  // @@protoc_insertion_point(field_add_mutable:storage.ListFilesResponse.filenames)
  return _s;
}
inline const std::string& ListFilesResponse::filenames(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:storage.ListFilesResponse.filenames)
  return _internal_filenames().Get(index);
}
inline std::string* ListFilesResponse::mutable_filenames(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:storage.ListFilesResponse.filenames)
  return _internal_mutable_filenames()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ListFilesResponse::set_filenames(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_filenames()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:storage.ListFilesResponse.filenames)
}
template <typename Arg_, typename... Args_>
inline void ListFilesResponse::add_filenames(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_filenames(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:storage.ListFilesResponse.filenames)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ListFilesResponse::filenames() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:storage.ListFilesResponse.filenames)
  return _internal_filenames();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ListFilesResponse::mutable_filenames() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:storage.ListFilesResponse.filenames)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_filenames();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ListFilesResponse::_internal_filenames() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filenames_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ListFilesResponse::_internal_mutable_filenames() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.filenames_;
}

// -------------------------------------------------------------------

// HealthCheckRequest

// string node_id = 1;
inline void HealthCheckRequest::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.ClearToEmpty();
}
inline const std::string& HealthCheckRequest::node_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:storage.HealthCheckRequest.node_id)
  return _internal_node_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HealthCheckRequest::set_node_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:storage.HealthCheckRequest.node_id)
}
inline std::string* HealthCheckRequest::mutable_node_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:storage.HealthCheckRequest.node_id)
  return _s;
}
inline const std::string& HealthCheckRequest::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_.Get();
}
inline void HealthCheckRequest::_internal_set_node_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.Set(value, GetArena());
}
inline std::string* HealthCheckRequest::_internal_mutable_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_id_.Mutable( GetArena());
}
inline std::string* HealthCheckRequest::release_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:storage.HealthCheckRequest.node_id)
  return _impl_.node_id_.Release();
}
inline void HealthCheckRequest::set_allocated_node_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.node_id_.IsDefault()) {
          _impl_.node_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.HealthCheckRequest.node_id)
}

// -------------------------------------------------------------------

// HealthCheckResponse

// bool healthy = 1;
inline void HealthCheckResponse::clear_healthy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.healthy_ = false;
}
inline bool HealthCheckResponse::healthy() const {
  // @@protoc_insertion_point(field_get:storage.HealthCheckResponse.healthy)
  return _internal_healthy();
}
inline void HealthCheckResponse::set_healthy(bool value) {
  _internal_set_healthy(value);
  // @@protoc_insertion_point(field_set:storage.HealthCheckResponse.healthy)
}
inline bool HealthCheckResponse::_internal_healthy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.healthy_;
}
inline void HealthCheckResponse::_internal_set_healthy(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.healthy_ = value;
}

// double latency_ms = 2;
inline void HealthCheckResponse::clear_latency_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latency_ms_ = 0;
}
inline double HealthCheckResponse::latency_ms() const {
  // @@protoc_insertion_point(field_get:storage.HealthCheckResponse.latency_ms)
  return _internal_latency_ms();
}
inline void HealthCheckResponse::set_latency_ms(double value) {
  _internal_set_latency_ms(value);
  // @@protoc_insertion_point(field_set:storage.HealthCheckResponse.latency_ms)
}
inline double HealthCheckResponse::_internal_latency_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latency_ms_;
}
inline void HealthCheckResponse::_internal_set_latency_ms(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latency_ms_ = value;
}

// string status = 3;
inline void HealthCheckResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& HealthCheckResponse::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:storage.HealthCheckResponse.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HealthCheckResponse::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:storage.HealthCheckResponse.status)
}
inline std::string* HealthCheckResponse::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:storage.HealthCheckResponse.status)
  return _s;
}
inline const std::string& HealthCheckResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void HealthCheckResponse::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* HealthCheckResponse::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* HealthCheckResponse::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:storage.HealthCheckResponse.status)
  return _impl_.status_.Release();
}
inline void HealthCheckResponse::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:storage.HealthCheckResponse.status)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace storage


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_storage_2eproto_2epb_2eh
