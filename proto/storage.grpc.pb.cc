// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storage.proto

#include "storage.pb.h"
#include "storage.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace storage {

static const char* StorageService_method_names[] = {
  "/storage.StorageService/StoreChunk",
  "/storage.StorageService/RetrieveChunk",
  "/storage.StorageService/DeleteFile",
  "/storage.StorageService/ListFiles",
  "/storage.StorageService/HealthCheck",
};

std::unique_ptr< StorageService::Stub> StorageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StorageService::Stub> stub(new StorageService::Stub(channel, options));
  return stub;
}

StorageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StoreChunk_(StorageService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RetrieveChunk_(StorageService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteFile_(StorageService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListFiles_(StorageService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HealthCheck_(StorageService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StorageService::Stub::StoreChunk(::grpc::ClientContext* context, const ::storage::StoreChunkRequest& request, ::storage::StoreChunkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::storage::StoreChunkRequest, ::storage::StoreChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StoreChunk_, context, request, response);
}

void StorageService::Stub::async::StoreChunk(::grpc::ClientContext* context, const ::storage::StoreChunkRequest* request, ::storage::StoreChunkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::storage::StoreChunkRequest, ::storage::StoreChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreChunk_, context, request, response, std::move(f));
}

void StorageService::Stub::async::StoreChunk(::grpc::ClientContext* context, const ::storage::StoreChunkRequest* request, ::storage::StoreChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::storage::StoreChunkResponse>* StorageService::Stub::PrepareAsyncStoreChunkRaw(::grpc::ClientContext* context, const ::storage::StoreChunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::storage::StoreChunkResponse, ::storage::StoreChunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StoreChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::storage::StoreChunkResponse>* StorageService::Stub::AsyncStoreChunkRaw(::grpc::ClientContext* context, const ::storage::StoreChunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStoreChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageService::Stub::RetrieveChunk(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest& request, ::storage::RetrieveChunkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::storage::RetrieveChunkRequest, ::storage::RetrieveChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RetrieveChunk_, context, request, response);
}

void StorageService::Stub::async::RetrieveChunk(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest* request, ::storage::RetrieveChunkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::storage::RetrieveChunkRequest, ::storage::RetrieveChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RetrieveChunk_, context, request, response, std::move(f));
}

void StorageService::Stub::async::RetrieveChunk(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest* request, ::storage::RetrieveChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RetrieveChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::storage::RetrieveChunkResponse>* StorageService::Stub::PrepareAsyncRetrieveChunkRaw(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::storage::RetrieveChunkResponse, ::storage::RetrieveChunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RetrieveChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::storage::RetrieveChunkResponse>* StorageService::Stub::AsyncRetrieveChunkRaw(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRetrieveChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageService::Stub::DeleteFile(::grpc::ClientContext* context, const ::storage::DeleteFileRequest& request, ::storage::DeleteFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::storage::DeleteFileRequest, ::storage::DeleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteFile_, context, request, response);
}

void StorageService::Stub::async::DeleteFile(::grpc::ClientContext* context, const ::storage::DeleteFileRequest* request, ::storage::DeleteFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::storage::DeleteFileRequest, ::storage::DeleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteFile_, context, request, response, std::move(f));
}

void StorageService::Stub::async::DeleteFile(::grpc::ClientContext* context, const ::storage::DeleteFileRequest* request, ::storage::DeleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::storage::DeleteFileResponse>* StorageService::Stub::PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::storage::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::storage::DeleteFileResponse, ::storage::DeleteFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::storage::DeleteFileResponse>* StorageService::Stub::AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::storage::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageService::Stub::ListFiles(::grpc::ClientContext* context, const ::storage::ListFilesRequest& request, ::storage::ListFilesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::storage::ListFilesRequest, ::storage::ListFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListFiles_, context, request, response);
}

void StorageService::Stub::async::ListFiles(::grpc::ClientContext* context, const ::storage::ListFilesRequest* request, ::storage::ListFilesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::storage::ListFilesRequest, ::storage::ListFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFiles_, context, request, response, std::move(f));
}

void StorageService::Stub::async::ListFiles(::grpc::ClientContext* context, const ::storage::ListFilesRequest* request, ::storage::ListFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::storage::ListFilesResponse>* StorageService::Stub::PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::storage::ListFilesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::storage::ListFilesResponse, ::storage::ListFilesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::storage::ListFilesResponse>* StorageService::Stub::AsyncListFilesRaw(::grpc::ClientContext* context, const ::storage::ListFilesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageService::Stub::HealthCheck(::grpc::ClientContext* context, const ::storage::HealthCheckRequest& request, ::storage::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::storage::HealthCheckRequest, ::storage::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void StorageService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::storage::HealthCheckRequest* request, ::storage::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::storage::HealthCheckRequest, ::storage::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void StorageService::Stub::async::HealthCheck(::grpc::ClientContext* context, const ::storage::HealthCheckRequest* request, ::storage::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::storage::HealthCheckResponse>* StorageService::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::storage::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::storage::HealthCheckResponse, ::storage::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::storage::HealthCheckResponse>* StorageService::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::storage::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

StorageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::storage::StoreChunkRequest, ::storage::StoreChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::storage::StoreChunkRequest* req,
             ::storage::StoreChunkResponse* resp) {
               return service->StoreChunk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::storage::RetrieveChunkRequest, ::storage::RetrieveChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::storage::RetrieveChunkRequest* req,
             ::storage::RetrieveChunkResponse* resp) {
               return service->RetrieveChunk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::storage::DeleteFileRequest, ::storage::DeleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::storage::DeleteFileRequest* req,
             ::storage::DeleteFileResponse* resp) {
               return service->DeleteFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::storage::ListFilesRequest, ::storage::ListFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::storage::ListFilesRequest* req,
             ::storage::ListFilesResponse* resp) {
               return service->ListFiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageService::Service, ::storage::HealthCheckRequest, ::storage::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::storage::HealthCheckRequest* req,
             ::storage::HealthCheckResponse* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
}

StorageService::Service::~Service() {
}

::grpc::Status StorageService::Service::StoreChunk(::grpc::ServerContext* context, const ::storage::StoreChunkRequest* request, ::storage::StoreChunkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::RetrieveChunk(::grpc::ServerContext* context, const ::storage::RetrieveChunkRequest* request, ::storage::RetrieveChunkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::DeleteFile(::grpc::ServerContext* context, const ::storage::DeleteFileRequest* request, ::storage::DeleteFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::ListFiles(::grpc::ServerContext* context, const ::storage::ListFilesRequest* request, ::storage::ListFilesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageService::Service::HealthCheck(::grpc::ServerContext* context, const ::storage::HealthCheckRequest* request, ::storage::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace storage

