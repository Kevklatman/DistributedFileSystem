// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storage.proto
// Original file comments:
// proto/storage.proto
#ifndef GRPC_storage_2eproto__INCLUDED
#define GRPC_storage_2eproto__INCLUDED

#include "storage.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace storage {

class StorageService final {
 public:
  static constexpr char const* service_full_name() {
    return "storage.StorageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status StoreChunk(::grpc::ClientContext* context, const ::storage::StoreChunkRequest& request, ::storage::StoreChunkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::StoreChunkResponse>> AsyncStoreChunk(::grpc::ClientContext* context, const ::storage::StoreChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::StoreChunkResponse>>(AsyncStoreChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::StoreChunkResponse>> PrepareAsyncStoreChunk(::grpc::ClientContext* context, const ::storage::StoreChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::StoreChunkResponse>>(PrepareAsyncStoreChunkRaw(context, request, cq));
    }
    virtual ::grpc::Status RetrieveChunk(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest& request, ::storage::RetrieveChunkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::RetrieveChunkResponse>> AsyncRetrieveChunk(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::RetrieveChunkResponse>>(AsyncRetrieveChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::RetrieveChunkResponse>> PrepareAsyncRetrieveChunk(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::RetrieveChunkResponse>>(PrepareAsyncRetrieveChunkRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteFile(::grpc::ClientContext* context, const ::storage::DeleteFileRequest& request, ::storage::DeleteFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::DeleteFileResponse>> AsyncDeleteFile(::grpc::ClientContext* context, const ::storage::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::DeleteFileResponse>>(AsyncDeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::DeleteFileResponse>> PrepareAsyncDeleteFile(::grpc::ClientContext* context, const ::storage::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::DeleteFileResponse>>(PrepareAsyncDeleteFileRaw(context, request, cq));
    }
    virtual ::grpc::Status ListFiles(::grpc::ClientContext* context, const ::storage::ListFilesRequest& request, ::storage::ListFilesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::ListFilesResponse>> AsyncListFiles(::grpc::ClientContext* context, const ::storage::ListFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::ListFilesResponse>>(AsyncListFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::ListFilesResponse>> PrepareAsyncListFiles(::grpc::ClientContext* context, const ::storage::ListFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::ListFilesResponse>>(PrepareAsyncListFilesRaw(context, request, cq));
    }
    virtual ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::storage::HealthCheckRequest& request, ::storage::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::storage::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::storage::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::storage::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void StoreChunk(::grpc::ClientContext* context, const ::storage::StoreChunkRequest* request, ::storage::StoreChunkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StoreChunk(::grpc::ClientContext* context, const ::storage::StoreChunkRequest* request, ::storage::StoreChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RetrieveChunk(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest* request, ::storage::RetrieveChunkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RetrieveChunk(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest* request, ::storage::RetrieveChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteFile(::grpc::ClientContext* context, const ::storage::DeleteFileRequest* request, ::storage::DeleteFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteFile(::grpc::ClientContext* context, const ::storage::DeleteFileRequest* request, ::storage::DeleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListFiles(::grpc::ClientContext* context, const ::storage::ListFilesRequest* request, ::storage::ListFilesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListFiles(::grpc::ClientContext* context, const ::storage::ListFilesRequest* request, ::storage::ListFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::storage::HealthCheckRequest* request, ::storage::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HealthCheck(::grpc::ClientContext* context, const ::storage::HealthCheckRequest* request, ::storage::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::storage::StoreChunkResponse>* AsyncStoreChunkRaw(::grpc::ClientContext* context, const ::storage::StoreChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::storage::StoreChunkResponse>* PrepareAsyncStoreChunkRaw(::grpc::ClientContext* context, const ::storage::StoreChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::storage::RetrieveChunkResponse>* AsyncRetrieveChunkRaw(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::storage::RetrieveChunkResponse>* PrepareAsyncRetrieveChunkRaw(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::storage::DeleteFileResponse>* AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::storage::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::storage::DeleteFileResponse>* PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::storage::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::storage::ListFilesResponse>* AsyncListFilesRaw(::grpc::ClientContext* context, const ::storage::ListFilesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::storage::ListFilesResponse>* PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::storage::ListFilesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::storage::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::storage::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::storage::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::storage::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status StoreChunk(::grpc::ClientContext* context, const ::storage::StoreChunkRequest& request, ::storage::StoreChunkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::StoreChunkResponse>> AsyncStoreChunk(::grpc::ClientContext* context, const ::storage::StoreChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::StoreChunkResponse>>(AsyncStoreChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::StoreChunkResponse>> PrepareAsyncStoreChunk(::grpc::ClientContext* context, const ::storage::StoreChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::StoreChunkResponse>>(PrepareAsyncStoreChunkRaw(context, request, cq));
    }
    ::grpc::Status RetrieveChunk(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest& request, ::storage::RetrieveChunkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::RetrieveChunkResponse>> AsyncRetrieveChunk(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::RetrieveChunkResponse>>(AsyncRetrieveChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::RetrieveChunkResponse>> PrepareAsyncRetrieveChunk(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::RetrieveChunkResponse>>(PrepareAsyncRetrieveChunkRaw(context, request, cq));
    }
    ::grpc::Status DeleteFile(::grpc::ClientContext* context, const ::storage::DeleteFileRequest& request, ::storage::DeleteFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::DeleteFileResponse>> AsyncDeleteFile(::grpc::ClientContext* context, const ::storage::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::DeleteFileResponse>>(AsyncDeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::DeleteFileResponse>> PrepareAsyncDeleteFile(::grpc::ClientContext* context, const ::storage::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::DeleteFileResponse>>(PrepareAsyncDeleteFileRaw(context, request, cq));
    }
    ::grpc::Status ListFiles(::grpc::ClientContext* context, const ::storage::ListFilesRequest& request, ::storage::ListFilesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::ListFilesResponse>> AsyncListFiles(::grpc::ClientContext* context, const ::storage::ListFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::ListFilesResponse>>(AsyncListFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::ListFilesResponse>> PrepareAsyncListFiles(::grpc::ClientContext* context, const ::storage::ListFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::ListFilesResponse>>(PrepareAsyncListFilesRaw(context, request, cq));
    }
    ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::storage::HealthCheckRequest& request, ::storage::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::storage::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::storage::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::storage::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StoreChunk(::grpc::ClientContext* context, const ::storage::StoreChunkRequest* request, ::storage::StoreChunkResponse* response, std::function<void(::grpc::Status)>) override;
      void StoreChunk(::grpc::ClientContext* context, const ::storage::StoreChunkRequest* request, ::storage::StoreChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RetrieveChunk(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest* request, ::storage::RetrieveChunkResponse* response, std::function<void(::grpc::Status)>) override;
      void RetrieveChunk(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest* request, ::storage::RetrieveChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteFile(::grpc::ClientContext* context, const ::storage::DeleteFileRequest* request, ::storage::DeleteFileResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteFile(::grpc::ClientContext* context, const ::storage::DeleteFileRequest* request, ::storage::DeleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListFiles(::grpc::ClientContext* context, const ::storage::ListFilesRequest* request, ::storage::ListFilesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListFiles(::grpc::ClientContext* context, const ::storage::ListFilesRequest* request, ::storage::ListFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HealthCheck(::grpc::ClientContext* context, const ::storage::HealthCheckRequest* request, ::storage::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void HealthCheck(::grpc::ClientContext* context, const ::storage::HealthCheckRequest* request, ::storage::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::storage::StoreChunkResponse>* AsyncStoreChunkRaw(::grpc::ClientContext* context, const ::storage::StoreChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::storage::StoreChunkResponse>* PrepareAsyncStoreChunkRaw(::grpc::ClientContext* context, const ::storage::StoreChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::storage::RetrieveChunkResponse>* AsyncRetrieveChunkRaw(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::storage::RetrieveChunkResponse>* PrepareAsyncRetrieveChunkRaw(::grpc::ClientContext* context, const ::storage::RetrieveChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::storage::DeleteFileResponse>* AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::storage::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::storage::DeleteFileResponse>* PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::storage::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::storage::ListFilesResponse>* AsyncListFilesRaw(::grpc::ClientContext* context, const ::storage::ListFilesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::storage::ListFilesResponse>* PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::storage::ListFilesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::storage::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::storage::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::storage::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::storage::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StoreChunk_;
    const ::grpc::internal::RpcMethod rpcmethod_RetrieveChunk_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteFile_;
    const ::grpc::internal::RpcMethod rpcmethod_ListFiles_;
    const ::grpc::internal::RpcMethod rpcmethod_HealthCheck_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StoreChunk(::grpc::ServerContext* context, const ::storage::StoreChunkRequest* request, ::storage::StoreChunkResponse* response);
    virtual ::grpc::Status RetrieveChunk(::grpc::ServerContext* context, const ::storage::RetrieveChunkRequest* request, ::storage::RetrieveChunkResponse* response);
    virtual ::grpc::Status DeleteFile(::grpc::ServerContext* context, const ::storage::DeleteFileRequest* request, ::storage::DeleteFileResponse* response);
    virtual ::grpc::Status ListFiles(::grpc::ServerContext* context, const ::storage::ListFilesRequest* request, ::storage::ListFilesResponse* response);
    virtual ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::storage::HealthCheckRequest* request, ::storage::HealthCheckResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StoreChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StoreChunk() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StoreChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreChunk(::grpc::ServerContext* /*context*/, const ::storage::StoreChunkRequest* /*request*/, ::storage::StoreChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreChunk(::grpc::ServerContext* context, ::storage::StoreChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::storage::StoreChunkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RetrieveChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RetrieveChunk() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RetrieveChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveChunk(::grpc::ServerContext* /*context*/, const ::storage::RetrieveChunkRequest* /*request*/, ::storage::RetrieveChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRetrieveChunk(::grpc::ServerContext* context, ::storage::RetrieveChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::storage::RetrieveChunkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::storage::DeleteFileRequest* /*request*/, ::storage::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFile(::grpc::ServerContext* context, ::storage::DeleteFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::storage::DeleteFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListFiles() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::storage::ListFilesRequest* /*request*/, ::storage::ListFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFiles(::grpc::ServerContext* context, ::storage::ListFilesRequest* request, ::grpc::ServerAsyncResponseWriter< ::storage::ListFilesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HealthCheck() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::storage::HealthCheckRequest* /*request*/, ::storage::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::storage::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::storage::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StoreChunk<WithAsyncMethod_RetrieveChunk<WithAsyncMethod_DeleteFile<WithAsyncMethod_ListFiles<WithAsyncMethod_HealthCheck<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StoreChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StoreChunk() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::storage::StoreChunkRequest, ::storage::StoreChunkResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::storage::StoreChunkRequest* request, ::storage::StoreChunkResponse* response) { return this->StoreChunk(context, request, response); }));}
    void SetMessageAllocatorFor_StoreChunk(
        ::grpc::MessageAllocator< ::storage::StoreChunkRequest, ::storage::StoreChunkResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::storage::StoreChunkRequest, ::storage::StoreChunkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StoreChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreChunk(::grpc::ServerContext* /*context*/, const ::storage::StoreChunkRequest* /*request*/, ::storage::StoreChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StoreChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::storage::StoreChunkRequest* /*request*/, ::storage::StoreChunkResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RetrieveChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RetrieveChunk() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::storage::RetrieveChunkRequest, ::storage::RetrieveChunkResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::storage::RetrieveChunkRequest* request, ::storage::RetrieveChunkResponse* response) { return this->RetrieveChunk(context, request, response); }));}
    void SetMessageAllocatorFor_RetrieveChunk(
        ::grpc::MessageAllocator< ::storage::RetrieveChunkRequest, ::storage::RetrieveChunkResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::storage::RetrieveChunkRequest, ::storage::RetrieveChunkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RetrieveChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveChunk(::grpc::ServerContext* /*context*/, const ::storage::RetrieveChunkRequest* /*request*/, ::storage::RetrieveChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RetrieveChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::storage::RetrieveChunkRequest* /*request*/, ::storage::RetrieveChunkResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteFile() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::storage::DeleteFileRequest, ::storage::DeleteFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::storage::DeleteFileRequest* request, ::storage::DeleteFileResponse* response) { return this->DeleteFile(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteFile(
        ::grpc::MessageAllocator< ::storage::DeleteFileRequest, ::storage::DeleteFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::storage::DeleteFileRequest, ::storage::DeleteFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::storage::DeleteFileRequest* /*request*/, ::storage::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::storage::DeleteFileRequest* /*request*/, ::storage::DeleteFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListFiles() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::storage::ListFilesRequest, ::storage::ListFilesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::storage::ListFilesRequest* request, ::storage::ListFilesResponse* response) { return this->ListFiles(context, request, response); }));}
    void SetMessageAllocatorFor_ListFiles(
        ::grpc::MessageAllocator< ::storage::ListFilesRequest, ::storage::ListFilesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::storage::ListFilesRequest, ::storage::ListFilesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::storage::ListFilesRequest* /*request*/, ::storage::ListFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::storage::ListFilesRequest* /*request*/, ::storage::ListFilesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::storage::HealthCheckRequest, ::storage::HealthCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::storage::HealthCheckRequest* request, ::storage::HealthCheckResponse* response) { return this->HealthCheck(context, request, response); }));}
    void SetMessageAllocatorFor_HealthCheck(
        ::grpc::MessageAllocator< ::storage::HealthCheckRequest, ::storage::HealthCheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::storage::HealthCheckRequest, ::storage::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::storage::HealthCheckRequest* /*request*/, ::storage::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::storage::HealthCheckRequest* /*request*/, ::storage::HealthCheckResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StoreChunk<WithCallbackMethod_RetrieveChunk<WithCallbackMethod_DeleteFile<WithCallbackMethod_ListFiles<WithCallbackMethod_HealthCheck<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StoreChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StoreChunk() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StoreChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreChunk(::grpc::ServerContext* /*context*/, const ::storage::StoreChunkRequest* /*request*/, ::storage::StoreChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RetrieveChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RetrieveChunk() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RetrieveChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveChunk(::grpc::ServerContext* /*context*/, const ::storage::RetrieveChunkRequest* /*request*/, ::storage::RetrieveChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::storage::DeleteFileRequest* /*request*/, ::storage::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListFiles() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::storage::ListFilesRequest* /*request*/, ::storage::ListFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HealthCheck() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::storage::HealthCheckRequest* /*request*/, ::storage::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StoreChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StoreChunk() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StoreChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreChunk(::grpc::ServerContext* /*context*/, const ::storage::StoreChunkRequest* /*request*/, ::storage::StoreChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RetrieveChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RetrieveChunk() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RetrieveChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveChunk(::grpc::ServerContext* /*context*/, const ::storage::RetrieveChunkRequest* /*request*/, ::storage::RetrieveChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRetrieveChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteFile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::storage::DeleteFileRequest* /*request*/, ::storage::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListFiles() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::storage::ListFilesRequest* /*request*/, ::storage::ListFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFiles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::storage::HealthCheckRequest* /*request*/, ::storage::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StoreChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StoreChunk() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StoreChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_StoreChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreChunk(::grpc::ServerContext* /*context*/, const ::storage::StoreChunkRequest* /*request*/, ::storage::StoreChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StoreChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RetrieveChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RetrieveChunk() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RetrieveChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_RetrieveChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveChunk(::grpc::ServerContext* /*context*/, const ::storage::RetrieveChunkRequest* /*request*/, ::storage::RetrieveChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RetrieveChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteFile() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::storage::DeleteFileRequest* /*request*/, ::storage::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListFiles() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListFiles(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::storage::ListFilesRequest* /*request*/, ::storage::ListFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HealthCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::storage::HealthCheckRequest* /*request*/, ::storage::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HealthCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StoreChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StoreChunk() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::storage::StoreChunkRequest, ::storage::StoreChunkResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::storage::StoreChunkRequest, ::storage::StoreChunkResponse>* streamer) {
                       return this->StreamedStoreChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StoreChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StoreChunk(::grpc::ServerContext* /*context*/, const ::storage::StoreChunkRequest* /*request*/, ::storage::StoreChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStoreChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::storage::StoreChunkRequest,::storage::StoreChunkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RetrieveChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RetrieveChunk() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::storage::RetrieveChunkRequest, ::storage::RetrieveChunkResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::storage::RetrieveChunkRequest, ::storage::RetrieveChunkResponse>* streamer) {
                       return this->StreamedRetrieveChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RetrieveChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RetrieveChunk(::grpc::ServerContext* /*context*/, const ::storage::RetrieveChunkRequest* /*request*/, ::storage::RetrieveChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRetrieveChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::storage::RetrieveChunkRequest,::storage::RetrieveChunkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::storage::DeleteFileRequest, ::storage::DeleteFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::storage::DeleteFileRequest, ::storage::DeleteFileResponse>* streamer) {
                       return this->StreamedDeleteFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::storage::DeleteFileRequest* /*request*/, ::storage::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::storage::DeleteFileRequest,::storage::DeleteFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListFiles() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::storage::ListFilesRequest, ::storage::ListFilesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::storage::ListFilesRequest, ::storage::ListFilesResponse>* streamer) {
                       return this->StreamedListFiles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::storage::ListFilesRequest* /*request*/, ::storage::ListFilesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListFiles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::storage::ListFilesRequest,::storage::ListFilesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HealthCheck() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::storage::HealthCheckRequest, ::storage::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::storage::HealthCheckRequest, ::storage::HealthCheckResponse>* streamer) {
                       return this->StreamedHealthCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* /*context*/, const ::storage::HealthCheckRequest* /*request*/, ::storage::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHealthCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::storage::HealthCheckRequest,::storage::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StoreChunk<WithStreamedUnaryMethod_RetrieveChunk<WithStreamedUnaryMethod_DeleteFile<WithStreamedUnaryMethod_ListFiles<WithStreamedUnaryMethod_HealthCheck<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_StoreChunk<WithStreamedUnaryMethod_RetrieveChunk<WithStreamedUnaryMethod_DeleteFile<WithStreamedUnaryMethod_ListFiles<WithStreamedUnaryMethod_HealthCheck<Service > > > > > StreamedService;
};

}  // namespace storage


#endif  // GRPC_storage_2eproto__INCLUDED
